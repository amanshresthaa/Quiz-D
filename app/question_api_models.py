"""
Models for API requests and responses related to question generation.
"""

from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
from enum import Enum

from app.models import Question, Quiz, QuestionType, DifficultyLevel


class QuestionGenerationRequest(BaseModel):
    """Request model for single question generation."""
    topic_or_query: str = Field(..., description="Topic or query to generate question about")
    question_type: QuestionType = Field(default=QuestionType.MULTIPLE_CHOICE, description="Type of question to generate")
    difficulty: DifficultyLevel = Field(default=DifficultyLevel.MEDIUM, description="Difficulty level of the question")


class MultiQuestionGenerationRequest(BaseModel):
    """Request model for generating multiple questions."""
    topic_or_query: str = Field(..., description="Topic or query to generate questions about")
    num_questions: int = Field(default=5, description="Number of questions to generate", ge=1, le=20)
    question_types: List[QuestionType] = Field(default=[QuestionType.MULTIPLE_CHOICE], description="Types of questions to generate")
    difficulty: DifficultyLevel = Field(default=DifficultyLevel.MEDIUM, description="Difficulty level of the questions")


class QuickQuizGenerationRequest(BaseModel):
    """Request model for generating a complete quiz directly from a topic."""
    title: str = Field(..., description="Quiz title")
    description: Optional[str] = Field(default=None, description="Quiz description")
    topic_or_query: str = Field(..., description="Topic or query to generate questions about")
    num_questions: int = Field(default=5, description="Number of questions to generate", ge=1, le=20)
    question_types: List[QuestionType] = Field(default=[QuestionType.MULTIPLE_CHOICE], description="Types of questions to generate")
    difficulty: DifficultyLevel = Field(default=DifficultyLevel.MEDIUM, description="Difficulty level of the questions")


class QuestionGenerationResponse(BaseModel):
    """Response model for question generation."""
    question: Optional[Question] = Field(default=None, description="Generated question")
    error: Optional[str] = Field(default=None, description="Error message if generation failed")
    processing_time: float = Field(default=0.0, description="Time taken to generate question")


class MultiQuestionGenerationResponse(BaseModel):
    """Response model for multi-question generation."""
    questions: List[Question] = Field(default_factory=list, description="Generated questions")
    count: int = Field(default=0, description="Number of questions generated")
    error: Optional[str] = Field(default=None, description="Error message if generation failed")
    processing_time: float = Field(default=0.0, description="Time taken to generate questions")


class QuickQuizGenerationResponse(BaseModel):
    """Response model for quick quiz generation."""
    quiz: Optional[Quiz] = Field(default=None, description="Generated quiz")
    error: Optional[str] = Field(default=None, description="Error message if generation failed")
    processing_time: float = Field(default=0.0, description="Time taken to generate quiz")


class QuestionGenerationStats(BaseModel):
    """Statistics about question generation."""
    total_questions_generated: int = Field(default=0, description="Total number of questions generated")
    successful_generations: int = Field(default=0, description="Number of successful generations")
    failed_generations: int = Field(default=0, description="Number of failed generations")
    questions_by_type: Dict[str, int] = Field(default_factory=dict, description="Number of questions generated by type")
    average_quality_score: float = Field(default=0.0, description="Average quality score of generated questions")
    quality_checks_performed: int = Field(default=0, description="Number of quality checks performed")
